// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  role     UserRole @default(USER)
  accessLevel Int @default(1) // 1 = básico, 2 = intermediário, 3 = avançado, 4 = admin
  cards    Card[]
  listPermissions ListPermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model List {
  id    Int     @id @default(autoincrement())
  name  String
  order Int     @default(0)
  requiredAccessLevel Int @default(1) // Nível mínimo de acesso necessário para ver esta lista
  isPublic Boolean @default(true) // Se false, só usuários com permissão específica podem ver
  cards Card[]
  permissions ListPermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lists")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  cards Card[]
}

model Tag {
  id         Int    @id @default(autoincrement())
  name       String
  color      String
  importance Int    // 1 = baixa, 2 = média, 3 = alta
  cards      CardTag[]
}

model Topic {
  id    Int    @id @default(autoincrement())
  title String
  cardId Int
  card   Card  @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model CardTag {
  cardId Int
  tagId  Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([cardId, tagId])
}

model ListPermission {
  id       Int    @id @default(autoincrement())
  userId   Int
  listId   Int
  canView  Boolean @default(true)
  canEdit  Boolean @default(false)
  canDelete Boolean @default(false)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  list     List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, listId])
  @@map("list_permissions")
}

model Card {
  id          Int      @id @default(autoincrement())
  listId      Int      @map("list_id")
  title       String
  order       Int      @default(0)
  description String?
  date        String?
  label       String?
  attachment  String?
  userId      Int      @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  categoryId  Int?       // Categoria opcional
  category    Category?  @relation(fields: [categoryId], references: [id])
  topics      Topic[]
  tags        CardTag[]
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cards")
}
